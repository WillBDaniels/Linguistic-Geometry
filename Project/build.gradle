apply from: 'javafx.plugin'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'


sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
def mainClassName = "edu.wdaniels.lg.Main"
def mainAppName = "LG Project 2"
def versionNumber = "2.0"
jfxJar.enabled = false;
jfxCopyLibs.enabled = false;
test {
    useJUnit()
    //forkEvery = 1
}

dependencies {
    compile fileTree(dir: 'lib', includes: ['*.jar'])
    compile 'log4j:log4j:1.2.17'
    compile 'org.mvel:mvel2:2.2.4.Final'

    testCompile 'junit:junit:4.11'
}
repositories {
    mavenCentral()
}
task wrapper(type: Wrapper){
    gradleVersion = '2.0'
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
javafx {
    appID '{C15A6650-A798-479A-B8F2-F83C6725AAB7}'
    mainClass = mainClassName
    appName = mainAppName

    embedLauncher = true // caution: class-path not set and is overwritten if set to false

    // applet and webstart stuff
    width = 800
    height = 600
    embedJNLP = false
    jvmArgs = ['-Xmx1024m']
    icons {
        shortcut = ['icons/programLogo16.png', 'icons/programLogo32.png', 'icons/programLogo128.png']
    }

    // deplpy/info attributes
    category = 'production'
    copyright = 'Copyright (c) 2014 Magnetic Variation Services'
    description = 'This is a school program designed by William Daniels for the Linguistic Geometry course. '
    licenseType = '3 clause BSD'
    vendor = 'William Daniels (AppsByWill)'

    // deploy/preferences attributes
    installSystemWide = true
    menu = true
    shortcut = true

    // app icons
}
jar{
    from {configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest{
        attributes("Main-Class": mainClassName);
    }
}

task docs(type:Exec) {
    ext {
        outputDir = file('build/docs')
    }
    if (System.getenv("PATH").toLowerCase().contains("doxygen")){
        commandLine 'doxygen'
        inputs.file file("Doxyfile");
        inputs.files sourceSets.main.java, sourceSets.test.java
        outputs.dir outputDir
    }else{
        System.out.println("I'm sorry, you need doxygen installed to run the program, \n"
            + "please visit http://www.stack.nl/~dimitri/doxygen/download.html\n"
            + "to download the lastest version of doxygen. ");
    }
}

task copyFinalZip (type: Copy){
    from ('build/distributions'){
        include '*.zip'
    }
    into 'Zipped_Builds/'
}

task zipEverything(type: Zip){
    baseName = mainAppName
    classifier = versionNumber
    from 'build/distributions/bundles/'
}



build.dependsOn (  assemble, zipEverything, copyFinalZip)
task zipEverything.mustRunAfter ( assemble)
task copyFinalZip.mustRunAfter  (zipEverything)
task all (dependsOn: [build])
